name: win-only
on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  win:
    runs-on: windows-2022
    env:
      BUILD_TYPE: Release

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup MSVC x64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # （可留可不留）先列模組，方便你之後要精準加 Qt 模組
      - name: Probe available Qt modules (6.6.3)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: aqt list modules
        run: |
          python -m pip install -q aqtinstall==3.2.1
          python -m aqt list-qt windows desktop --modules 6.6.3 win64_msvc2019_64

      - name: Install Qt 6.6.3 (archives)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.6.3'
          host: 'windows'
          arch: 'win64_msvc2019_64'
          aqtversion: '==3.2.1'
          archives: 'qtbase qtdeclarative qtquickcontrols2 qtsvg qttools qtshadertools'
          cache: true

      # ⭐ 安裝 Bonjour/mDNSResponder（會提供 dns_sd.h / dns_sd.lib）
      - name: Install mDNSResponder via vcpkg
        shell: pwsh
        run: |
          & "C:\vcpkg\vcpkg.exe" version
          & "C:\vcpkg\vcpkg.exe" install mdnsresponder:x64-windows
          if ($LASTEXITCODE -ne 0) { throw "vcpkg install mdnsresponder failed" }

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Clean build dir
        shell: pwsh
        run: Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue

      - name: Configure (Ninja + vcpkg + DNSSD)
        shell: pwsh
        env:
          CMAKE_GENERATOR: Ninja
        run: |
          ninja --version
          cmake --version

          $triplet    = "x64-windows"
          $vcpkgRoot  = "C:\vcpkg"
          $dnssdInc   = Join-Path $vcpkgRoot "installed\$triplet\include"
          $dnssdLib   = Join-Path $vcpkgRoot "installed\$triplet\lib\dns_sd.lib"
          $toolchain  = Join-Path $vcpkgRoot "scripts\buildsystems\vcpkg.cmake"

          if (!(Test-Path $dnssdInc) -or !(Test-Path $dnssdLib)) {
            throw "dns_sd not found. Expected:`n  $dnssdInc`n  $dnssdLib"
          }

          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" `
            -DCMAKE_TOOLCHAIN_FILE="$toolchain" `
            -DVCPKG_TARGET_TRIPLET=$triplet `
            -DDNSSD_INCLUDE_DIR="$dnssdInc" `
            -DDNSSD_LIB="$dnssdLib" `
            -DDNSSD_ROOT_DIR=(Join-Path $vcpkgRoot "installed\$triplet") `
            -DCMAKE_VERBOSE_MAKEFILE=ON

          if (!(Test-Path build/build.ninja)) { throw "CMake did not generate build.ninja" }

      - name: Build (verbose)
        run: cmake --build build --parallel --verbose

      - name: Find built EXE
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Path build -Filter "*.exe" | Select-Object -First 1
          if (-not $exe) { throw "No EXE found under build/" }
          "exe=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          Write-Host "EXE => $($exe.FullName)"

      - name: Deploy Qt runtime (windeployqt if available)
        shell: pwsh
        continue-on-error: true
        run: |
          $wqt = Join-Path $env:Qt6_DIR "bin\windeployqt.exe"
          if (Test-Path $wqt) {
            & $wqt "${{ steps.findexe.outputs.exe }}" --release --compiler-runtime
          } else {
            Write-Host "windeployqt.exe not found; skipping."
          }

      - name: Package zip
        shell: pwsh
        run: |
          $out = "dist"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Copy-Item -Recurse -Force (Split-Path "${{ steps.findexe.outputs.exe }}")"\*" $out\
          Compress-Archive -Path $out\* -DestinationPath input-leap-windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: input-leap-windows
          path: input-leap-windows.zip
