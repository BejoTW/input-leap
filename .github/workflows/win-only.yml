name: win-only
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  win:
    runs-on: windows-2022
    env:
      BUILD_TYPE: Release

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup MSVC x64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Qt 先不指定 modules，避免鏡像 metadata 抽風導致整個步驟失敗
      - name: Install Qt 6.6.3 (no modules)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.6.3'
          host: 'windows'
          arch: 'win64_msvc2019_64'
          aqtversion: '==3.2.1'
          cache: true

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      # 先清掉殘留的 build，再強制用 Ninja 重新 Configure
      - name: Clean build dir
        shell: pwsh
        run: Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue

      - name: Configure (force Ninja + verify)
        shell: pwsh
        env:
          CMAKE_GENERATOR: Ninja
        run: |
          # 強制 Ninja 並顯示版本
          ninja --version
          cmake --version

          # 重新產生
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" `
            -DCMAKE_VERBOSE_MAKEFILE=ON

          Write-Host "---- build dir listing after configure ----"
          Get-ChildItem build -Force | Select Name,Length,Mode | Format-Table | Out-Host

          # 沒有 build.ninja 就直接丟錯（避免到下一步才炸）
          if (!(Test-Path build/build.ninja)) {
            Write-Host "CMAKE_GENERATOR cache:"
            Select-String -Path build/CMakeCache.txt -Pattern "CMAKE_GENERATOR" | ForEach-Object { $_.Line } | Out-Host
            Write-Error "CMake did not generate build.ninja (generator 不是 Ninja 或 Configure 失敗)。"
          }

          # 額外列出 Cache（幫助除錯）
          cmake -LAH -N build | Out-Host

      - name: Build (verbose)
        run: cmake --build build --parallel --verbose

      - name: Find built EXE
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Path build -Filter "*.exe" | Select-Object -First 1
          if (-not $exe) {
            Get-ChildItem -Recurse build | Select-Object -First 200 | Format-Table | Out-Host
            throw "No EXE found under build/"
          }
          "exe=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          Write-Host "EXE => $($exe.FullName)"

      - name: Deploy Qt runtime (windeployqt if available)
        shell: pwsh
        continue-on-error: true
        run: |
          $wqt = Join-Path $env:Qt6_DIR "bin\windeployqt.exe"
          if (Test-Path $wqt) {
            & $wqt "${{ steps.findexe.outputs.exe }}" --release --compiler-runtime
            if ($LASTEXITCODE -ne 0) { throw "windeployqt failed with code $LASTEXITCODE" }
          } else {
            Write-Host "windeployqt.exe not found; skipping runtime deployment."
          }

      - name: Package zip
        shell: pwsh
        run: |
          $out = "dist"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Copy-Item -Recurse -Force (Split-Path "${{ steps.findexe.outputs.exe }}")"\*" $out\
          Compress-Archive -Path $out\* -DestinationPath input-leap-windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: input-leap-windows
          path: input-leap-windows.zip
