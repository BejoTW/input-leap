name: win-only
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  win:
    runs-on: windows-2022
    env:
      BUILD_TYPE: Release

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup MSVC x64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Qt LTS，最穩：6.6.3（注意 modules 空白分隔、arch 命名）
      - name: Install Qt 6.6.3 (MSVC x64, pinned aqt)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.6.3'
          host: 'windows'
          arch: 'win64_msvc2019_64'
          aqtversion: '==3.2.1'
          modules: 'qttools qtdeclarative qtquickcontrols2 qtsvg qtshadertools'
          cache: true

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Configure (verbose)
        shell: pwsh
        run: |
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" `
            -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build (verbose)
        run: cmake --build build --parallel --verbose

      - name: Find built EXE
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Path build -Filter "*.exe" | Select-Object -First 1
          if (-not $exe) {
            Get-ChildItem -Recurse build | Select-Object -First 200 | Format-Table | Out-Host
            throw "No EXE found under build/"
          }
          "exe=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          Write-Host "EXE => $($exe.FullName)"

      - name: Deploy Qt runtime (windeployqt)
        shell: pwsh
        run: |
          & "$env:Qt6_DIR\bin\windeployqt.exe" "${{ steps.findexe.outputs.exe }}" --release --compiler-runtime
          if ($LASTEXITCODE -ne 0) { throw "windeployqt failed with code $LASTEXITCODE" }

      - name: Package zip
        shell: pwsh
        run: |
          $out = "dist"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Copy-Item -Recurse -Force (Split-Path "${{ steps.findexe.outputs.exe }}")"\*" $out\
          Compress-Archive -Path $out\* -DestinationPath input-leap-windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: input-leap-windows
          path: input-leap-windows.zip
